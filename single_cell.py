# -*- coding: utf-8 -*-
"""single_cell.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1Oo51c1xNsD1QylO3zndNJELuZ-45aw
"""

pip install scanpy

import pandas as pd
import scanpy as sc
import umap
import anndata as ad

df = pd.read_csv("/content/drive/MyDrive/Postdoctoral research/single_cell_pipeline/combined.csv")

mapping = {1:'Yes', 0:'No'}
mapping_disease = {'sepsis':'Sepsis',
                   'sepsis_covid':'Mild COVID-19',
                   'septic_shock': 'Septic Shock',
                   'septic_shock_covid': 'Severe COVID-19'}


df['covid'] = df['covid'].map(mapping)
df['severe'] = df['severe'].map(mapping)
df['condition'] = df['condition'].map(mapping_disease)

expression_data = df.iloc[:, :-4].values
metadata = df.iloc[:, -4:]

adata = ad.AnnData(X=expression_data)

for column in metadata.columns:
    adata.obs[column] = metadata[column].values

umap_params = {
    'n_neighbors': 40,    # Number of neighbors to consider for each point
    'min_dist': 0.2,      # Minimum distance between points in the embedding
    'n_components': 2,    # Number of dimensions in the embedding
    'metric': 'euclidean' # Distance metric for comparing data points
}

# Calculate UMAP representation with custom parameters
umap_result = umap.UMAP(**umap_params).fit_transform(adata.X)

adata.obsm['X_umap'] = umap_result

adata.obs

metadata

sc.pl.umap(adata, color = 'covid')

import matplotlib.pyplot as plt

# Assuming you have already calculated UMAP and added it to adata.obsm
fig, axs = plt.subplots(2, 2, figsize=(10, 10))  # Create a 2x2 grid of subplots

# List of columns for coloring
color_columns = ['severe', 'condition', 'Cell_Type_Experimental', 'covid']

# Loop through the subplots and plot UMAP with specified columns
for i, column in enumerate(color_columns):
    row = i // 2  # Calculate the row index
    col = i % 2   # Calculate the column index
    sc.pl.umap(adata, color=column, ax=axs[row, col], show=False)
    #axs[row, col].set_title("")  # Remove the subplot title

# Adjust layout spacing
plt.tight_layout()

# Show the plot
plt.show()